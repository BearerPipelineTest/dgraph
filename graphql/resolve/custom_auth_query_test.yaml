- name : "custom DQL query with @groupby"
  gqlquery: |
    query{
      queryIssueGroupedByOwner {
        groupby {
          owner
          count
        } 
      }
    }
  jwtvar:
    ROLE: "ADMIN"
    USER: "user1"
  dgquery: |-
    query {
      queryIssueGroupedByOwner(func: uid(GroupedIssueMapQRoot)) @groupby(owner : Issue.owner) {
        count(uid)
      }
      GroupedIssueMapQRoot as var(func: uid(Issue_1)) @filter(uid(Issue_Auth2))
      Issue_1 as var(func: type(Issue))
      Issue_Auth2 as var(func: uid(Issue_1)) @cascade {
        Issue.owner : Issue.owner @filter(eq(User.username, "user1"))
      }
    }

- name : "custom DQL query with var block"
  gqlquery: |
    query{
      queryUserSortedByTweetScore {
        username
        age
      }
    }
  jwtvar:
    ROLE: "ADMIN"
    USER: "user1"
  dgquery: |-
    query {
      var(func: type(User)) {
        User.tweets {
          score as Tweets.score
        }
      }
      queryUserSortedByTweetScore(func: uid(score), orderdesc: score) {
        username : User.username
        age : User.age
        tweets : User.tweets {
          text : Tweets.text
          score : Tweets.score
        }
      }
    }
