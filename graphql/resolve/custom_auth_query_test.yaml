- name : "custom DQL query with @groupby"
  gqlquery: |
    query{
      queryIssueGroupedByOwner {
        groupby {
          owner
          count
        } 
      }
    }
  jwtvar:
    ROLE: "ADMIN"
    USER: "user1"
  dgquery: |-
    query {
      queryIssueGroupedByOwner(func: uid(GroupedIssueMapQRoot)) @groupby(owner : Issue.owner) {
        count(uid)
      }
      GroupedIssueMapQRoot as var(func: uid(Issue_1)) @filter(uid(Issue_Auth2))
      Issue_1 as var(func: type(Issue))
      Issue_Auth2 as var(func: uid(Issue_1)) @cascade {
        Issue.owner : Issue.owner @filter(eq(User.username, "user1"))
      }
    }

- name : "custom DQL query with var block satisfying RBAC @auth rules"
  gqlquery: |
    query{
      queryIssueSortedByOwnerAge {
        id
        msg
        random
      }
    }
  jwtvar:
    ROLE: "ADMIN"
    USER: "user1"
  dgquery: |-
    query {
      var(func: uid(IssueRoot)) {
        Issue.owner @filter(uid(User_1)) {
          age as User.age
        }
      }
      IssueRoot as var(func: uid(Issue_3)) @filter(uid(Issue_Auth4))
      Issue_3 as var(func: type(Issue))
      Issue_Auth4 as var(func: uid(Issue_3)) @cascade {
        Issue.owner : Issue.owner @filter(eq(User.username, "user1"))
      }
      var(func: uid(IssueRoot)) {
        User_2 as Issue.owner
      }
      User_1 as var(func: uid(User_2))
      queryIssueSortedByOwnerAge(func: uid(age), orderdesc: age) {
        id : uid
        msg : Issue.msg
        random : Issue.random
      }
    }

- name : "custom DQL query with var block failing RBAC @auth rules"
  gqlquery: |
    query{
      queryIssueSortedByOwnerAge {
        id
        msg
        random
      }
    }
  jwtvar:
    ROLE: "USER"
    USER: "user1"
  dgquery: |-
    query {
      var(func: uid(0x0)) {
        Issue.owner {
          age as User.age
        }
      }
      queryIssueSortedByOwnerAge(func: uid(age), orderdesc: age) {
        id : uid
        msg : Issue.msg
        random : Issue.random
      }
    }
- name : "Auth Rules with deep filter"
  gqlquery: |
    query {
      queryUsers {
        username
        tickets {
          id
          title
        }
      }
    }
  jwtvar:
    USER: "user1"
  dgquery: |-
    query {
      queryUsers(func: uid(UserRoot)) {
        username : User.username
        tickets : User.tickets @filter(uid(Ticket_1)) {
          id : uid
          title : Ticket.title
        }
      }
      UserRoot as var(func: uid(User_4))
      User_4 as var(func: uid(0x1)) @filter(eq(User.username,minhaj))
      var(func: uid(UserRoot)) {
        Ticket_2 as User.tickets
      }
      Ticket_1 as var(func: uid(Ticket_2)) @filter(uid(Ticket_Auth3))
      Ticket_Auth3 as var(func: uid(Ticket_2)) @cascade {
        Ticket.onColumn : Ticket.onColumn {
          Column.inProject : Column.inProject {
            Project.roles : Project.roles @filter(eq(Role.permission, "VIEW")) {
              Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
            }
          }
        }
      }
    }

- name : "Auth rules with deep filter missing JWT"
  gqlquery: |
    query{
      queryUsers{
        username
        tickets {
          id
          title
        }
      }
    }
  dgquery: |-
    query {
      queryUsers(func: uid(UserRoot)) {
        username : User.username
      }
      UserRoot as var(func: uid(User_3))
      User_3 as var(func: uid(0x1)) @filter(eq(User.username,minhaj))
    }

- name: "Deep RBAC rule with cascade - Level 1 false"
  gqlquery: |
    query {
      queryContacts {
        id
        nickName
        adminTasks {
          id
          name
          occurrences {
            due
            comp
          }
        }
      }
    }
  jwtvar:
    ContactRole: ADMINISTRATOR
    TaskRole: User
    TaskOccuranceRole: ADMINISTRATOR
  dgquery: |-
    query {
      queryContacts(func: uid(ContactRoot)) @cascade {
        id : uid
        nickName : Contact.nickName
        adminTasks : Contact.adminTasks @filter(uid(AdminTask_1)) {
          id : uid
          name : AdminTask.name
          occurrences : AdminTask.occurrences @filter(uid(TaskOccurrence_3)) {
            due : TaskOccurrence.due
            comp : TaskOccurrence.comp
          }
        }
      }
      ContactRoot as var(func: uid(Contact_7))
      Contact_7 as var(func: type(Contact))
      var(func: uid(ContactRoot)) {
        AdminTask_2 as Contact.adminTasks
      }
      AdminTask_1 as var(func: uid(AdminTask_2)) @filter(uid(AdminTask_6))
      var(func: uid(AdminTask_1)) {
        TaskOccurrence_4 as AdminTask.occurrences
      }
      TaskOccurrence_3 as var(func: uid(TaskOccurrence_4)) @filter(uid(TaskOccurrence_Auth5))
      TaskOccurrence_Auth5 as var(func: uid(TaskOccurrence_4)) @filter(eq(TaskOccurrence.role, "ADMINISTRATOR")) @cascade
      AdminTask_6 as var(func: uid())
    }
